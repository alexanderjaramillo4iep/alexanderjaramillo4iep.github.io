{"version":3,"sources":["App/shared/resources/lorem-ipsum.txt","App/shared/components/content/index.js","App/shared/components/content/Content.js","App/shared/components/button/index.js","App/shared/components/button/Button.js","App/shared/components/example/ButtonGroups/ButtonGroups.js","App/shared/helpers/SampleTextGenerator.js","App/shared/components/example/index.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Content","props","classProp","className","split","join","children","Button","onClick","ButtonGroup","group","map","type","i","prefix","key","handleBtnClick","ButtonGroups","outlineChange","outline","useState","setOutline","setPrefix","evt","newVal","Sample","get","Promise","resolve","reject","fetch","loremIpsumPath","then","r","text","catch","Example","state","loremIpsum","SampleTextGenerator","updateLoremIpsum","this","setState","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,yC,+OCE5BC,ECCC,SAAAC,GACd,IACMC,EAAYD,EAAME,WAAa,GACrC,OACA,yBAAKA,UAAW,UAHO,CAAC,WAGR,YAAwBD,EAAUE,MAAM,OAAOC,KAAK,MACjEJ,EAAMK,W,OCNIC,G,MCEA,SAAAN,GACb,IACMC,EAAYD,EAAME,WAAa,GACrC,OACA,yBACEA,UAAW,UAJU,CAAC,OAIX,YAAwBD,EAAUE,MAAM,OAAOC,KAAK,KAC/DG,QAASP,EAAMO,SACf,gCAASP,EAAMK,aCPbG,G,MAAc,SAAAR,GAClB,OACE,yBAAKE,UAAU,SACZF,EAAMS,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,kBAAC,EAAD,CACEV,UAAW,CAACF,EAAMa,OAAQF,GAAMP,KAAK,KACrCU,IAAKF,EACLL,QAASP,EAAMe,gBACfJ,SAgCKK,EA1BM,SAAAhB,GAEnB,IAAMiB,EAAgB,SAAAC,GAAO,OAAIA,EAAU,cAAgB,OAF/B,EAGEC,qBAASnB,EAAMkB,SAHjB,mBAGrBA,EAHqB,KAGZE,EAHY,OAIAD,mBAASF,EAAcC,IAJvB,mBAIrBL,EAJqB,KAIbQ,EAJa,KAYtBN,EAAiB,SAAAO,GACrB,IAAMC,GAAUL,EAChBE,EAAWG,GACXF,EAAUJ,EAAcM,KAG1B,OACE,yBAAKrB,UAAU,UAbF,CACb,CAAC,UAAW,YAAa,YACzB,CAAC,UAAW,OAAQ,UAAW,UAC/B,CAAC,QAAS,SAWAQ,KAAI,SAACD,EAAOG,GAAR,OACV,kBAAC,EAAD,CAAaH,MAAOA,EAAOM,eAAgBA,EAAgBD,IAAKF,EAAGC,OAAQA,S,iBC3BpEW,EAVA,CACbC,IAAK,kBAAM,IAAIC,SAAQ,SAACC,EAASC,GAE/BC,MAAMC,KACHC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,KAAKJ,GACLO,MAAMN,QCFPO,E,4MAEJC,MAAQ,CACNC,WAAY,I,kEAGO,IAAD,OAClBC,EAAoBb,MACnBM,MAAK,SAAAE,GAEJ,EAAKM,iBAAiBN,Q,uCAITI,GACfG,KAAKC,SAAS,CAACJ,iB,+BAIf,OACE,kBAAC,EAAD,KACE,2CACA,8CACA,2DACA,8CACA,2BAAIG,KAAKJ,MAAMC,YACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAanB,SAAO,S,GA3BNwB,IAAMC,WCWbC,ICfAA,EDMf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QEAc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.12752688.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lorem-ipsum.db89bb5c.txt\";","import Content from './Content';\n\nexport default Content","import React from 'react'\nimport '../../style/default.scss'\n\nconst Content = props => {\n  const defaultClasses = [\"content\"]\n  const classProp = props.className || ''\n  return (\n  <div className={[...defaultClasses, ...(classProp.split(' '))].join(' ')} >\n    {props.children}\n  </div>)\n}\nexport default Content","import Button from './Button';\n\nexport default Button","import React from 'react'\nimport '../../style/default.scss'\nimport './Button.scss'\n\nconst Button = props => {\n  const defaultClasses = [\"btn\"]\n  const classProp = props.className || ''\n  return (\n  <div \n    className={[...defaultClasses, ...(classProp.split(' '))].join(' ')} \n    onClick={props.onClick} >\n    <button>{props.children}</button>\n  </div>)\n}\nexport default Button","import React, { useState } from 'react'\nimport Button from '../../button'\nimport './ButtonGroups.scss';\n\nconst ButtonGroup = props => {\n  return (\n    <div className=\"group\">\n      {props.group.map((type, i) => (\n        <Button \n          className={[props.prefix, type].join('-')} \n          key={i} \n          onClick={props.handleBtnClick}\n        >{type}</Button>\n      ))}\n    </div>\n  )\n}\n\nconst ButtonGroups = props => {\n\n  const outlineChange = outline => outline ? 'btn-outline' : 'btn'\n  const [outline, setOutline] = useState(props.outline ? true : false)\n  const [prefix, setPrefix] = useState(outlineChange(outline))\n\n  const groups = [\n    [\"primary\", \"secondary\", \"tertiary\"],\n    [\"success\", \"info\", \"warning\", \"danger\"],\n    [\"light\", \"dark\"]\n  ]\n\n  const handleBtnClick = evt => {\n    const newVal = !outline\n    setOutline(newVal)\n    setPrefix(outlineChange(newVal))\n  }\n\n  return (\n    <div className=\"groups\">\n      {groups.map((group, i) => \n        <ButtonGroup group={group} handleBtnClick={handleBtnClick} key={i} prefix={prefix}/>\n      )}\n    </div>\n  )\n}\nexport default ButtonGroups","import loremIpsumPath from '../resources/lorem-ipsum.txt';\n\nconst Sample = {\n  get: () => new Promise((resolve, reject) => {\n\n    fetch(loremIpsumPath)\n      .then((r) => r.text())\n      .then(resolve)\n      .catch(reject)\n  }),\n}\n\nexport default Sample","import React from 'react'\n\nimport Content from '../content';\nimport ButtonGroup from './ButtonGroups/ButtonGroups';\nimport {SampleTextGenerator} from '../../helpers';\n\nclass Example extends React.Component {\n\n  state = {\n    loremIpsum: ''\n  }\n  \n  componentDidMount() {\n    SampleTextGenerator.get()\n    .then(text  => {\n      // console.log({text, now: Date.now()});\n      this.updateLoremIpsum(text)\n    })\n  }\n\n  updateLoremIpsum(loremIpsum) {\n    this.setState({loremIpsum})\n  }\n\n  render() {\n    return (\n      <Content>\n        <h1>Lorem ipsum</h1>\n        <h2>Dolor sit amet</h2>\n        <h3>Consectetur adipiscing elit</h3>\n        <h4>Sed do eiusmod</h4>\n        <p>{this.state.loremIpsum}</p>\n        <ButtonGroup />\n        <ButtonGroup outline />\n      </Content>\n    )\n  }\n}\nexport {ButtonGroup, Example}","import React from 'react';\n\n// import logo from './logo.svg';\nimport './shared/style/default.scss'\nimport './App.scss';\n\nimport {Example} from './shared/components/example';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Example />\n      <Example />\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}